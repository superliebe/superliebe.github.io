{"meta":{"title":"superKM的博客","subtitle":"superKM","description":"superKM的个人博客","author":"superKM","url":"http://superliebe.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-24T08:46:04.913Z","updated":"2020-05-24T08:46:04.913Z","comments":true,"path":"404.html","permalink":"http://superliebe.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2020-05-24T08:23:24.038Z","updated":"2020-05-24T08:23:24.038Z","comments":true,"path":"categories/index.html","permalink":"http://superliebe.github.io/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2020-05-24T13:52:18.053Z","updated":"2020-05-24T13:52:18.053Z","comments":true,"path":"friends/index.html","permalink":"http://superliebe.github.io/friends/index.html","excerpt":"推荐一个技术博主","text":"推荐一个技术博主"},{"title":"","date":"2020-05-24T08:45:19.617Z","updated":"2020-05-24T08:45:19.617Z","comments":true,"path":"mylist/index.html","permalink":"http://superliebe.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-24T08:44:21.697Z","updated":"2020-05-24T08:44:21.697Z","comments":true,"path":"tags/index.html","permalink":"http://superliebe.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2020-05-26T03:56:55.151Z","updated":"2020-05-26T03:56:55.151Z","comments":false,"path":"about/index.html","permalink":"http://superliebe.github.io/about/index.html","excerpt":"","text":".card { --card-bg-color: hsl(240, 31%, 25%); --card-bg-color-transparent: hsla(240, 31%, 25%, 0.7); position: relative; width: 300px; } .card .card-borders { position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; } .card .card-borders .border-top { position: absolute; top: 0; width: 100%; height: 2px; background: var(--card-bg-color); transform: translateX(-100%); animation: slide-in-horizontal 0.8s cubic-bezier(0.645, 0.045, 0.355, 1) forwards; } .card .card-borders .border-right { position: absolute; right: 0; width: 2px; height: 100%; background: var(--card-bg-color); transform: translateY(100%); animation: slide-in-vertical 0.8s cubic-bezier(0.645, 0.045, 0.355, 1) forwards; } .card .card-borders .border-bottom { position: absolute; bottom: 0; width: 100%; height: 2px; background: var(--card-bg-color); transform: translateX(100%); animation: slide-in-horizontal-reverse 0.8s cubic-bezier(0.645, 0.045, 0.355, 1) forwards; } .card .card-borders .border-left { position: absolute; top: 0; width: 2px; height: 100%; background: var(--card-bg-color); transform: translateY(-100%); animation: slide-in-vertical-reverse 0.8s cubic-bezier(0.645, 0.045, 0.355, 1) forwards; } .card .card-content { display: flex; flex-direction: column; align-items: center; padding: 40px 0 40px 0; font-family: Lato, sans-serif; background: var(--card-bg-color-transparent); box-shadow: 0 0px 0.6px rgba(0, 0, 0, 0.028), 0 0px 1.3px rgba(0, 0, 0, 0.04), 0 0px 2.5px rgba(0, 0, 0, 0.05), 0 0px 4.5px rgba(0, 0, 0, 0.06), 0 0px 8.4px rgba(0, 0, 0, 0.072), 0 0px 20px rgba(0, 0, 0, 0.1); opacity: 0; transform: scale(0.6); animation: bump-in 0.5s 0.8s forwards; } .card .card-content .avatar { width: 120px; height: 120px; border-radius: 50%; margin-bottom: 40px; opacity: 0; transform: scale(0.6); animation: bump-in 0.5s 1s forwards; } .card .card-content .username { position: relative; font-size: 26px; letter-spacing: 2px; margin-bottom: 40px; color: transparent; animation: fill-text-white 1.2s 2s forwards; } .card .card-content .username::before { position: absolute; content: \"\"; top: 0; left: 0; width: 100%; height: 100%; color: black; background: #35b9f1; transform: scaleX(0); transform-origin: left; animation: slide-in-out 1.2s 1.2s cubic-bezier(0.75, 0, 0, 1) forwards; } .card .card-content .social-icons { display: flex; position:relative; } .card .card-content .social-icons .social-icon { position: relative; display: flex; justify-content: center; align-items: center; width: 2.5em; height: 2.5em; margin: 0 15px; border-radius: 50%; color: white; text-decoration: none; } .card .card-content .social-icons .social-icon:nth-child(1)::before { animation-delay: 2.1s; } .card .card-content .social-icons .social-icon:nth-child(1)::after { animation-delay: 2.2s; } .card .card-content .social-icons .social-icon:nth-child(1) svg { animation-delay: 2.3s; } .card .card-content .social-icons .social-icon:nth-child(2)::before { animation-delay: 2.2s; } .card .card-content .social-icons .social-icon:nth-child(2)::after { animation-delay: 2.3s; } .card .card-content .social-icons .social-icon:nth-child(2) svg { animation-delay: 2.4s; } .card .card-content .social-icons .social-icon:nth-child(3)::before { animation-delay: 2.3s; } .card .card-content .social-icons .social-icon:nth-child(3)::after { animation-delay: 2.4s; } .card .card-content .social-icons .social-icon:nth-child(3) svg { animation-delay: 2.5s; } .card .card-content .social-icons .social-icon::before, .card .card-content .social-icons .social-icon::after { position: absolute; content: \"\"; top: 0; left: 0; width: 100%; height: 100%; border-radius: inherit; transform: scale(0); } .card .card-content .social-icons .social-icon::before { background: #f7f1e3; animation: scale-in 0.5s cubic-bezier(0.75, 0, 0, 1) forwards; } .card .card-content .social-icons .social-icon::after { background: #2C3E50; animation: scale-in 0.5s cubic-bezier(0.75, 0, 0, 1) forwards; } .card .card-content .social-icons .social-icon svg { z-index: 1; transform: scale(0); animation: scale-in 0.5s cubic-bezier(0.75, 0, 0, 1) forwards; } .card .card-content .card_wx:hover>.qrcode{ opacity:1; bottom: -83px; } .card .card-content .card_wx .qrcode{ width: 124px; border: 6px solid #FFF; border-radius: 9px; position: absolute!important; right: -136px; bottom: -43px; opacity:0; max-width: 1000%; box-shadow: 2px 2px 10px 2px #e8e8e8; } @keyframes bump-in { 50% { transform: scale(1.05); } to { opacity: 1; transform: scale(1); } } @keyframes slide-in-horizontal { 50% { transform: translateX(0); } to { transform: translateX(100%); } } @keyframes slide-in-horizontal-reverse { 50% { transform: translateX(0); } to { transform: translateX(-100%); } } @keyframes slide-in-vertical { 50% { transform: translateY(0); } to { transform: translateY(-100%); } } @keyframes slide-in-vertical-reverse { 50% { transform: translateY(0); } to { transform: translateY(100%); } } @keyframes slide-in-out { 50% { transform: scaleX(1); transform-origin: left; } 50.1% { transform-origin: right; } 100% { transform: scaleX(0); transform-origin: right; } } @keyframes fill-text-white { to { color: white; } } @keyframes scale-in { to { transform: scale(1); } } 一个前端菜菜 😶 个人情况 郑州大学本科毕业 工作 5 年余载，参与项目不计其数 热爱开源，热爱技术，热爱探索，热爱生活，热爱身边的一切 🧐 擅长领域 微信小程序开发 jquery 框架 Docker 自动部署 Nginx 代理 node.js Flutter web开发 kbone + vue 同时支持web和小程序 tradingviewK 线图制作 😇 期望 前端全栈攻城狮占领全地球，奥里给！"}],"posts":[{"title":"dockerToolbox的安装、配置镜像","slug":"dockerTool-box的安装配置","date":"2020-06-17T06:49:06.000Z","updated":"2020-06-18T13:45:54.628Z","comments":true,"path":"2020/06/17/dockerTool-box的安装配置/","link":"","permalink":"http://superliebe.github.io/2020/06/17/dockerTool-box%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。","text":"作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。 docker 的基本介绍首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。 容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而 Docker 只需要启动 10 个隔离的应用即可。 docker 与 传统虚拟机相比 特性 docker 容器 虚拟机 硬盘使用 一般为 MB 一般为 GB 性能 接近原生 弱于 系统支持量 单机支持上千个容器 一般几十个 DockerToolbox 安装 dockerdocker 官网 win7、win8，非 win10 专业版等需要利用 docker toolbox 来安装，国内可以使用阿里云的镜像来下载，下载地址：http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/ 选择需要的服务，进行下一步安装 安装成功后，桌面会显示启动图标，双击运行 如果运行成功，进入 docker 如果失败，请看下方安装问题 docker toolbox 环境下 使用阿里云容器镜像加速器 在 Docker Quickstart Terminal 命令行输入命令： 1docker-machine ssh default 意思是采用 docker-machine 命令，以 ssh 方式，从当前 Docker Quickstart Terminal 窗口登录名称为 default 的 docker 虚拟机 此时窗口进入到了 docker 虚拟机，docker-machine 命令已经失效。linux 命令生效。 输入 cat /var/lib/boot2docker/profile 查看当前配置文件，其中第一句中 EXTRA_ARGS=&#39;--registry-mirror=http://******.io registry-mirror=后的网址即为当前镜像地址。 使用如下命令即可改为阿里云镜像地址 sudo sed -i &quot;s|EXTRA_ARGS=&#39;|EXTRA_ARGS=&#39;--registry-mirror=镜像地址 |g&quot; /var/lib/boot2docker/profile 添加后输入exit 退出 docker@default 重启 docker-machine docker-machine restart default 输入docker info查看镜像配置，registry 中可以看到配置的镜像 注意：需要登录阿里云容器镜像服务，获取自己的加速地址,点击进入阿里云镜像服务 安装问题问题一 双击 Docker Quickstart Terminal，提示 windows 正在查找 bash.exe。如果想亲自查找文件，请点击“浏览”。 问题原因一般出现这个问题，是因为之前已经安装过了 git，且 bash.exe 的路径与 Docker Toolbox 中不一致导致的。 解决办法右击 Docker Quickstart Terminal 的图标，修改前一段 bash 的路径为本机 git 安装路径。 问题二 配置了镜像加速后，重启电脑，通过 docker info 查看镜像又成了原来默认的地址 解决方法 如果你创建主机了就先删除默认的虚拟机 1docker-machine rm default 打开 docker 安装目录，编辑 start.sh 文件（如果你 docker 创建主机了你修改之后要删除主机 重新创建一台） 1\"$&#123;DOCKER_MACHINE&#125;\" create -d virtualbox $PROXY_ENV \"$&#123;VM&#125;\" 改成 1\"$&#123;DOCKER_MACHINE&#125;\" create --engine-registry-mirror=https://你的阿里云地址 -d virtualbox $PROXY_ENV \"$&#123;VM&#125;\" 运行Docker Quickstart Termin 通过 docker info 查看镜像地址 就再也不会改变啦，可以开开心心的push了~","categories":[{"name":"docker","slug":"docker","permalink":"http://superliebe.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://superliebe.github.io/tags/docker/"}]},{"title":"koa2下一代web开发框架","slug":"koa下一代web开发框架","date":"2020-06-10T06:30:51.000Z","updated":"2020-06-11T09:58:16.913Z","comments":true,"path":"2020/06/10/koa下一代web开发框架/","link":"","permalink":"http://superliebe.github.io/2020/06/10/koa%E4%B8%8B%E4%B8%80%E4%BB%A3web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/","excerpt":"next generation web framework for node.js","text":"next generation web framework for node.js koa官网 先看一下 koa 的交互流程概念 koa的工作原理koa中的中间件本质上就是一个async函数 123async (ctx, next) =&gt; &#123; await next();&#125; Koa 中间件的实现原理，也就是洋葱模型的实现原理，核心在于next的实现。next需要依次调用下一个middleware，当到最后一个的时候结束，这样后面middleware的promise先resolve，然后直到第一个，这样的流程也就是洋葱模型的流程了。 基本写法示例 12345678const Koa = require('koa');const app = new Koa();app.use(async ctx =&gt; &#123; ctx.body = 'Hello World';&#125;);app.listen(3000); 打开浏览器 localhost:3000就可以看到Hello World koa-router路由配置1cnpm i -D koa-router 引入路由组件 1234567891011121314import Router from 'koa-router'// 或者// const Router = require('koa-router');// 定义routerconst router = new Router();//创建一个get方法router.get('/api',ctx=&gt;&#123; ctx.body = 'hello api!'&#125;)//router.prefix添加接口前缀router.prefix('/api') 路由组建压缩1cnpm i -S koa-combine-routers 添加安全头部 koa-helmet1cnpm i -S koa-helmet 添加静态文件 koa-static1cnpm i -S koa-static koa-body协议解析123456cnpm i koa-body// 使用方法，直接use即可const koaBody = require('koa-body');app.use(koaBody()); @koa/cors跨域处理123456cnpm i @koa/cors// 使用方法，直接use即可const cors = require('@koa/cors'); app.use(cors()); 配置koa的热加载 nodemon1cnpm i - D nodemon 使用npx nodemon src/index.js 监听文件内容变化，实现热更新","categories":[{"name":"koa","slug":"koa","permalink":"http://superliebe.github.io/categories/koa/"}],"tags":[{"name":"nodejs,koa","slug":"nodejs-koa","permalink":"http://superliebe.github.io/tags/nodejs-koa/"}]},{"title":"vue-cli4性能优化之路","slug":"vue-cli4性能优化之路","date":"2020-06-04T07:34:35.000Z","updated":"2020-06-10T06:19:52.365Z","comments":true,"path":"2020/06/04/vue-cli4性能优化之路/","link":"","permalink":"http://superliebe.github.io/2020/06/04/vue-cli4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF/","excerpt":"vue 生产环境上的性能优化：开启 Gzip、去掉打包后的 console、图片懒加载等","text":"vue 生产环境上的性能优化：开启 Gzip、去掉打包后的 console、图片懒加载等 开启 Gzip 压缩模式gizp 压缩是一种 http 请求优化方式，通过减少文件体积来提高加载速度，对于用户量多的网站，开启 gizp 压缩会大大降低服务器压力，提高加载速度，降低服务器流量成本 安装 compression-webpack-plugin 插件 1cnpm install compression-webpack-plugin --save-dev vue.config.js 配置 Gzip 压缩 1234567891011121314151617181920// 导入compression-webpack-pluginconst CompressionWebpackPlugin = require(\"compression-webpack-plugin\");// 定义压缩文件类型const productionGzipExtensions = [\"js\", \"css\"];module.exports = &#123; //统一配置打包插件 configureWebpack: &#123; plugins: [ new CompressionWebpackPlugin(&#123; filename: \"[path].gz[query]\", algorithm: \"gzip\", test: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"), //匹配文件名 threshold: 10240, //对10K以上的数据进行压缩 minRatio: 0.8, deleteOriginalAssets: false, //是否删除源文件 &#125;), ], &#125;,&#125;; npm run build 之后，对比之前的文件，平均压缩了 4 倍左右 接下来在服务器的 nginx 上配置 Gzip 123456gzip on; #开启或关闭gzip on offgzip_min_length 5k; #gzip压缩最小文件大小，超出进行压缩（自行调节）gzip_buffers 4 16k; #buffer 不用修改gzip_comp_level 4; #压缩级别:1-10，数字越大压缩的越好，时间也越长gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; # 压缩文件类型gzip_vary on; # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩 修改后记得执行 nginx -s reload 一般浏览器都已支持.gz 的资源文件，在 http 请求的 Request Headers 中能看到 Accept-Encoding:gzip，加载速度会提升很大。 去掉打包后的 console 使用 babel-plugin-transform-remove-console 插件 安装依赖库 1cnpm install babel-plugin-transform-remove-console --save-dev 【babel.config.js】配置如下 123456789const plugins = [\"@vue/babel-plugin-transform-vue-jsx\"];// 生产环境移除consoleif (process.env.NODE_ENV === \"production\") &#123; plugins.push(\"transform-remove-console\");&#125;module.exports = &#123; plugins: plugins, presets: [\"@vue/cli-plugin-babel/preset\"],&#125;; 打包部署后，生产环境的 console 就全部去掉了~ 图片懒加载 使用 vue-lazyload 安装依赖 1cnpm i vue-lazyload -S main.js 中直接引用 123456789101112131415import VueLazyload from \"vue-lazyload\";Vue.use(VueLazyload);// or with optionsVue.use(VueLazyload, &#123; //预加载高度 preLoad: 1.3, //错误时显示的图片 error: \"static/about111.jpg\", //图片加载中显示的图片 loading: \"static/img/loading.gif\", //尝试加载次数 attempt: 1,&#125;); 在组件中使用时，将 img 标签的 src 换成 v-lazy： 未使用懒加载前的代码： 1&lt;li&gt;&lt;img class=\"g-img1\" src=\"static/1.jpg\" alt=\"\" /&gt;&lt;/li&gt; 使用懒加载后的代码： 1&lt;li&gt;&lt;img class=\"g-img1\" v-lazy=\"'static/1.jpg'\" alt=\"\" /&gt;&lt;/li&gt;","categories":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/tags/vue/"}]},{"title":"vue常用小方法合集","slug":"vue常用小方法合集","date":"2020-06-03T03:21:09.000Z","updated":"2020-06-12T09:36:37.852Z","comments":true,"path":"2020/06/03/vue常用小方法合集/","link":"","permalink":"http://superliebe.github.io/2020/06/03/vue%E5%B8%B8%E7%94%A8%E5%B0%8F%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/","excerpt":"记录一下 vue 项目中经常使用的小方法","text":"记录一下 vue 项目中经常使用的小方法 一：获取 url 地址栏参数例如：/placeList?id=1; 1this.$route.query.id(id为连接上的参数名称); 二：向下一个页面传递对象 (query 传参)父.vue 12345678this.$router.push(&#123; path: \"/placeAdd\", query: item,&#125;);//path和query均为固定key名//path：跳转路径//query: 传递参数对象//item:数组对象 子.vue 1this.$route.query.item; 三：父组件向子组件传值父.vue 123456/*引入子组件*/&lt;child-v ref=\"chil\"&gt;&lt;/child-v&gt;;/*script *showHover为子元素内的方法*/this.$refs.chil.showMessage(\"父组件调用子组件方法啦\"); 子.vue 123456//只需要正常定义方法接参即可methods: &#123; showMessage(text) &#123; console.log(text) &#125;&#125; 四：父子组件相互调用 vue 子组件调用父组件方法： 子组件：this.$emit(‘xx’); 父组件:定义 yy 方法，并在引用子组件时传参,如@xx=”yy” vue 父组件调用子组件方法： 子组件：定义 xx 方法 父组件：引用子组件时加上 ref=”yy”,调用方法为 this.$refs.yy.xx() 五：阻止父元素冒泡事件123&lt;div @click=\"a\"&gt; &lt;button @click=\"b\"&gt;&lt;/button&gt;&lt;/div&gt; 当触发 button 的事件 a 时，b 事件也会被触发 解决办法：在 button 上添加@click.stop=”b”，来阻止事件冒泡。 123&lt;div @click=\"a\"&gt; &lt;button @click.stop=\"b\"&gt;&lt;/button&gt;&lt;/div&gt; 六：数组操作去掉指定数组对象 id 相同的元素1arr.splice(arr.findIndex(item &#x3D;&gt; item.id &#x3D;&#x3D; id), 1) 过滤对象数组中key值相同的数据1234567891011121314151617181920212223242526272829const arr =[ &#123; \"count\": 1095, \"month\": \"三月\", &#125;, &#123; \"count\": 1106, \"month\": \"三月\", &#125;, &#123; \"count\": 987, \"month\": \"四月\", &#125;, &#123; \"count\": 1166, \"month\": \"四月\", &#125;, &#123; \"count\": 753, \"month\": \"五月\", &#125;, &#123; \"count\": 891, \"month\": \"五月\", &#125;];const res = new Map();const new2 = arr.filter(item =&gt; !res.has(item.month) &amp;&amp; res.set(item.month, 1));console.log(arr.length, new2); 数组去重1234let arr = [1, 2, 2, 3, 3, 4, 4, 5, 6];let newArr = [...new Set(arr)];//结果：newArr = [1, 2, 3, 4, 5, 6] 随机取数组对象123456789101112131415161718192021222324function getArrayItems(arr, num) &#123; //新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组; var temp_array = new Array(); for (var index in arr) &#123; temp_array.push(arr[index]); &#125; //取出的数值项,保存在此数组 var return_array = new Array(); for (var i = 0; i &lt; num; i++) &#123; //判断如果数组还有可以取出的元素,以防下标越界 if (temp_array.length &gt; 0) &#123; //在数组中产生一个随机索引 var arrIndex = Math.floor(Math.random() * temp_array.length); //将此随机索引的对应的数组元素值复制出来 return_array[i] = temp_array[arrIndex]; //然后删掉此索引的数组元素,这时候temp_array变为新的数组 temp_array.splice(arrIndex, 1); &#125; else &#123; //数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项. break; &#125; &#125; return return_array;&#125; 七：限制能输入数字类型+小数点 纯整数 1onkeyup = \"value=value.replace(/[^d]/g,'')\"; 数字类型+小数点 1&lt;input type=\"text\" oninput=\"value=value.replace(/[^\\d.]/g,'')\" /&gt; 八：vue 修改 data 数据后页面未渲染 强制渲染 1this.$forceUpdate(); 使用 Vue.set 12345Vue.set(target, key, value);// target：要更改的数据源(可以是对象或者数组)// key：要更改的具体数据// value ：重新赋的值 九：时间戳转化为时间1234567891011121314151617//将时间戳转化为日期function timestampToTime(timestamp) &#123; var date = new Date(timestamp); //时间戳为10位需*1000，时间戳为13位的话不需乘1000 var Y = date.getFullYear() + \"-\"; var M = (date.getMonth() + 1 &lt; 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1) + \"-\"; var D = (date.getDate() &lt; 10 ? \"0\" + date.getDate() : date.getDate()) + \" \"; var h = (date.getHours() &lt; 10 ? \"0\" + date.getHours() : date.getHours()) + \":\"; var m = (date.getMinutes() &lt; 10 ? \"0\" + date.getMinutes() : date.getMinutes()) + \":\"; var s = date.getSeconds() &lt; 10 ? \"0\" + date.getSeconds() : date.getSeconds(); return Y + M + D + h + m + s;&#125; 十：计算两个时间相差日期123456789101112131415161718192021222324252627//startData,endData均为时间戳function timesDiffer(startData, endData) &#123; var date1 = startData; //开始时间 var date2 = endData; //结束时间 var date3 = parseInt(date2) - parseInt(date1); //时间差的毫秒数 //计算出相差天数 var days = Math.floor(date3 / (24 * 3600 * 1000)); //计算出小时数 var leave1 = date3 % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 var hours = Math.floor(leave1 / (3600 * 1000)); //计算相差分钟数 var leave2 = leave1 % (3600 * 1000); //计算小时数后剩余的毫秒数 var minutes = Math.floor(leave2 / (60 * 1000)); //计算相差秒数 var leave3 = leave2 % (60 * 1000); //计算分钟数后剩余的毫秒数 var seconds = Math.round(leave3 / 1000); if (hours &lt;= 0 &amp;&amp; minutes &lt;= 0 &amp;&amp; seconds &lt;= 0) &#123; //时间小于0s的操作 &#125; else &#123; hours = hours &lt; 10 ? \"0\" + hours : hours; minutes = minutes &lt; 10 ? \"0\" + minutes : minutes; seconds = seconds &lt; 10 ? \"0\" + seconds : seconds; return hours + \":\" + minutes + \":\" + seconds; &#125;&#125; 十一：下载文件流1234567891011//下载文件流function operateFile(file, filename) &#123; // var filename = ''; let url = window.URL.createObjectURL(file.data); let link = document.createElement(\"a\"); link.style.display = \"none\"; link.href = url; link.setAttribute(\"download\", filename + \".xls\"); document.body.appendChild(link); link.click();&#125; 十二：计算 n 天前后的日期123456789101112131415function getBeforeDate(strDate, n) &#123; //strDate 为字符串日期 如:'2020-01-01' n为你要传入的参数，当前为0，前一天为-1，后一天为1 let datt = strDate.split(\"-\"); //这边给定一个特定时间 var newDate = new Date(datt[0], datt[1] - 1, datt[2]); let befminuts = newDate.getTime() + 1000 * 60 * 60 * 24 * parseInt(n); //计算前几天用减，计算后几天用加，最后一个就是多少天的数量 let beforeDat = new Date(); beforeDat.setTime(befminuts); let befMonth = beforeDat.getMonth() + 1; let mon = befMonth &gt;= 10 ? befMonth : \"0\" + befMonth; let befDate = beforeDat.getDate(); let da = befDate &gt;= 10 ? befDate : \"0\" + befDate; var newDate = beforeDat.getFullYear() + \"-\" + mon + \"-\" + da; console.log(newDate); return newDate;&#125; 十三：ASCII 码排序参数123456789function objKeySort(obj) &#123; //obj排序对象 var newkey = Object.keys(obj).sort(); var newObj = &#123;&#125;; //创建一个新的对象，用于存放排好序的键值对 for (var i = 0; i &lt; newkey.length; i++) &#123; newObj[newkey[i]] = obj[newkey[i]]; &#125; return newObj; //返回排好序的新对象&#125;","categories":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/tags/vue/"}]},{"title":"yarn使安装健步如飞","slug":"yarn使安装健步如飞","date":"2020-06-01T13:55:20.000Z","updated":"2020-06-02T02:54:47.617Z","comments":true,"path":"2020/06/01/yarn使安装健步如飞/","link":"","permalink":"http://superliebe.github.io/2020/06/01/yarn%E4%BD%BF%E5%AE%89%E8%A3%85%E5%81%A5%E6%AD%A5%E5%A6%82%E9%A3%9E/","excerpt":"yarn 快速、可靠、安全的依赖管理工具。","text":"yarn 快速、可靠、安全的依赖管理工具。 看栗子说话采用 cnpm 和 yarn 安装 webpack 工具 cnpm 效果图（总花费 60s） yarn 效果图（总花费 11s） 🙄 为什么要用 yarn速度超快 Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。 超级安全 在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。 超级可靠 使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。 🧐 更新淘宝源12345678# yarn+淘宝源，飞一般的速度yarn config get registry# https://registry.yarnpkg.comyarn config set registry https://registry.npm.taobao.orgyarn config get registry# https://registry.npm.taobao.org 从 npm 迁移1234567891011npm install === yarnnpm install [package] --save === yarn add [package]npm install [package] --save-dev === yarn add [package] --devnpm install [package] --global === yarn global add [package]npm uninstall [package] --save === yarn remove [package]rm -rf node_modules &amp;&amp; npm install === yarn upgrade yarn 官网","categories":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/categories/vue/"}],"tags":[{"name":"npm,yarn","slug":"npm-yarn","permalink":"http://superliebe.github.io/tags/npm-yarn/"}]},{"title":"linux常用命令","slug":"linux常用命令","date":"2020-05-31T06:22:32.000Z","updated":"2020-06-01T14:42:19.689Z","comments":true,"path":"2020/05/31/linux常用命令/","link":"","permalink":"http://superliebe.github.io/2020/05/31/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"Linux，全称 GNU/Linux，是一套免费使用和自由传播的类 UNIX 操作系统","text":"Linux，全称 GNU/Linux，是一套免费使用和自由传播的类 UNIX 操作系统 文件相关 cd dirname 目录路径跳转 mkdir dirname 创建目录 touch filename 创建文件 vi filename 编辑文件 cat filename 查看文件 echo ‘123456’ &gt;&gt; test.txt 在 test.txt 文件尾部增加一行 ‘123123’ echo ‘123456’ &gt; test.txt 覆盖 test.txt 文件的内容为 ‘hello world’ rm text.txt 删除 text.txt 文件 rm -r textdir 删除 testdir 目录 rm -rf 强制删除 wget 文件地址 下载文件 tar zxvf 文件 （如 apache-tomcat-9.0.17.tar.zg：解压缩文件 tar 后面的参数 z 代表 gz 等结尾的压缩文件，x 代表解压缩，v 显示所有的解压过程，f 代表归档的名字） tar zcvf 文件名（如 apache-tomcat-9.0.18.tar.gz） 文件目录：讲文件目录 压缩为 文件名为 apache-tomcat-9.0.18.tar.gz ps -ef | grep 进程名： 查看进程（筛选进程） kill -9 进程 pid: 杀死 进程 查看系统服务 service 服务名 status: 如 （service sshd status :查询 ssh 服务的运行状态） service 服务名 stop :关闭某个服务 service 服务名 restart:重启某个服务 systemctl status firewalld.service: 查看某个服务运行状态 使用 root 用户连接 linux 服务器1ssh root@ip 防火墙设置检查防火墙 firewall-cmd --permanent --query-port=10022/tcp 如果是 no,就添加一下 firewall-cmd --permanent --add-port=10022/tcp 成功后再重载防火墙 firewall-cmd --reload 再重启下防火墙服务 systemctl restart firewalld.service","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://superliebe.github.io/tags/linux/"}]},{"title":"常用Markdown语法","slug":"常用Markdown语法","date":"2020-05-24T04:32:35.000Z","updated":"2020-05-24T09:30:31.492Z","comments":true,"path":"2020/05/24/常用Markdown语法/","link":"","permalink":"http://superliebe.github.io/2020/05/24/%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95/","excerpt":"Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档","text":"Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档 💡 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 一、标题 使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六级标题。# 和标题之间记得有个空格哦。 一级标题二级标题三级标题四级标题五级标题六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 二、引用使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推。 ❗ 部分编辑器不支持多级嵌套，建议不要使用 示例 这是一级引用 这是二级引用 这是三级引用 这是一级引用 1234567&gt; 这是一级引用&gt;&gt; &gt; 这是二级引用&gt; &gt;&gt; &gt; &gt; 这是三级引用&gt; 这是一级引用 三、代码块使用 3 个连续的` 符号包围起来表示代码块。可以指定语言来使代码高亮。 示例 12345$(document).ready(function() &#123; $(&#39;pre code&#39;).each(function(i, block) &#123; hljs.highlightBlock(block); &#125;);&#125;); 12345$(document).ready(function () &#123; $(\"pre code\").each(function (i, block) &#123; hljs.highlightBlock(block); &#125;);&#125;); 行内代码 使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。 示例 这是 javascript 代码 1这是&#96;javascript&#96;代码 四、链接使用 [](link) 表示行内链接。其中： [] 内的内容为要添加链接的文字。 link 为链接地址。 示例 这是跳转百度的链接 1这是跳转[百度](https:&#x2F;&#x2F;www.baidu.com)的链接 五、导入图片使用 ![Alt text](/path/to/img.jpg) 导入图片。其中： Alt text 为如果图片无法显示时显示的文字； /path/to/img.jpg 为图片所在路径； 本地引用是图片直接存储到本地通过相对路径引用，无需网络连接 上传图片将把图片上传至图床，这样在文档或图片移动时认可访问图片 示例 1![Markdown](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;03&#x2F;14&#x2F;I8wCZN4r9UltqTd.jpg) 六、Todo List小写 x 表示已完成， 空格表示未完成 支持数学公式 支持 TodoList 支持自定义样式 支持自定义图床 1234- [x] 支持数学公式- [x] 支持TodoList- [x] 支持自定义样式- [ ] 支持自定义图床 七、粗体，斜体，高亮和删除线 使用 ** 表示粗体。 1**粗体** 使用 * 或者 _ 表示 _斜体_。 1*斜体* 使用 *** 表示 全部粗体和斜体 1***全部粗体和斜体*** 使用 == 表示 ==高亮== ❗ 部分编辑器不支持高亮 1&#x3D;&#x3D;高亮&#x3D;&#x3D; 使用~~表示 删除 1~~删除~~ 八、列表使用 1. 1. 1. 表示有序列表，使用 * 或 - 或 + 表示无序列表。 无序列表或有序列表标记和后面的文字之间要有一个空格隔开。 有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例 1 所示。 无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例 2 所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。 _示例 1_：有序列表 第 1 行 第 2 行 第 3 行 1231. 第1行1. 第2行1. 第3行 _示例 2_：无序列表 一级无序列表内容 二级无序列表内容 三级无序列表内容 一级无序列表内容 1234+ 一级无序列表内容 - 二级无序列表内容 - 三级无序列表内容* 一级无序列表内容 九、分割线使用 --- 或者 *** 或者 * * * 表示水平分割线。 只要 * 或者 - 大于等于三个就可组成一条平行线。 使用 --- 作为水平分割线时，要在它的前后都空一行，防止 --- 被当成标题标记的表示方式。 示例 12345---**** * * 十、表格默认表格Heading | Heading | Heading——- | ——- | ——-Cell | Cell | CellCell | Cell | Cell 1234Heading | Heading | Heading------- | ------- | -------Cell | Cell | CellCell | Cell | Cell 对齐方式：Heading | Heading | Heading:—– | :—-: | ——:Left | Center | RightLeft | Center | Right 1234Heading | Heading | Heading:----- | :----: | ------:Left | Center | RightLeft | Center | Right 十一、emoji使用 :emoji代码: 在 markdown 里添加 emoji 👻 点击这里查看所有支持的 emoji 代码 ❗ 部分编辑器不支持 emoji code 建议直接输入 emoji，点击这里查看并复制 emoji","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://superliebe.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://superliebe.github.io/tags/Markdown/"}]},{"title":"kbone+vue创建支持web和微信小程序的项目","slug":"kbone-vue创建支持web和微信小程序的项目","date":"2020-04-26T07:28:52.000Z","updated":"2020-05-26T02:31:10.556Z","comments":true,"path":"2020/04/26/kbone-vue创建支持web和微信小程序的项目/","link":"","permalink":"http://superliebe.github.io/2020/04/26/kbone-vue%E5%88%9B%E5%BB%BA%E6%94%AF%E6%8C%81web%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%B9%E7%9B%AE/","excerpt":"Kbone 是腾讯开发的解决微信小程序和 Web 端同构的框架。简单来说就是只写一套代码，编译结果可以在 web 端和小程序上运行。","text":"Kbone 是腾讯开发的解决微信小程序和 Web 端同构的框架。简单来说就是只写一套代码，编译结果可以在 web 端和小程序上运行。 Kbone 特点 支持多种前端框架，如：vue、react、preact 等，并且能够保持该框架的完整； 页面渲染的内容需要用 js 中的 document 方法来渲染，提供常用的 DOM/BOM 接口； 小程序端开发仍可使用小程序本身特性； 更专注于微信和小程序的开发； Webpack 与 Kbone 是强耦合的，开发需借助 Webpack 提供的基本依赖 一：安装 kbone-cli命令行安装kbone-cli脚手架，用于创建kbone项目 1cnpm install -g kbone-cli 二：创建对应的 kbone 项目1kbone init my-app 可以根据自己所用到的技术选择对应的选项（本项目采用kbone+vue），回车确定。 创建成功之后，基本目录情况和 vue-cli4 目录差不多，其中在 build 文件夹里 miniprogram.config.js 进行小程序的配置，比如 appid 之类 三：在 main.js 中引入 kbone-ui，使项目 ui 更贴近微信风格（可选）安装 kbone-ui 1npm i kbone-ui main.js 中引入样式文件 1234import KboneUI from \"kbone-ui\";import \"kbone-ui/lib/weui/weui.css\";Vue.use(KboneUI); 四：运行项目12345678&#x2F;&#x2F; 开发小程序端npm run mp&#x2F;&#x2F; 开发 Web 端npm run web&#x2F;&#x2F; 构建 Web 端npm run build web端运行效果图 小程序端运行效果图npm run mp 之后 会在dis文件中创建对应的小程序文件，使用微信开发者工具打开预览， 注意：官方提醒，尽量使用kbone-ui开发，目前功能正在逐步完善兼容，使用其他组件库可能会出现问题 kbone 官方文档","categories":[{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/categories/vue/"},{"name":"kbone","slug":"vue/kbone","permalink":"http://superliebe.github.io/categories/vue/kbone/"},{"name":"微信小程序","slug":"vue/kbone/微信小程序","permalink":"http://superliebe.github.io/categories/vue/kbone/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"kbone,vue","slug":"kbone-vue","permalink":"http://superliebe.github.io/tags/kbone-vue/"}]}],"categories":[{"name":"docker","slug":"docker","permalink":"http://superliebe.github.io/categories/docker/"},{"name":"koa","slug":"koa","permalink":"http://superliebe.github.io/categories/koa/"},{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/categories/vue/"},{"name":"Markdown","slug":"Markdown","permalink":"http://superliebe.github.io/categories/Markdown/"},{"name":"kbone","slug":"vue/kbone","permalink":"http://superliebe.github.io/categories/vue/kbone/"},{"name":"微信小程序","slug":"vue/kbone/微信小程序","permalink":"http://superliebe.github.io/categories/vue/kbone/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://superliebe.github.io/tags/docker/"},{"name":"nodejs,koa","slug":"nodejs-koa","permalink":"http://superliebe.github.io/tags/nodejs-koa/"},{"name":"vue","slug":"vue","permalink":"http://superliebe.github.io/tags/vue/"},{"name":"npm,yarn","slug":"npm-yarn","permalink":"http://superliebe.github.io/tags/npm-yarn/"},{"name":"linux","slug":"linux","permalink":"http://superliebe.github.io/tags/linux/"},{"name":"Markdown","slug":"Markdown","permalink":"http://superliebe.github.io/tags/Markdown/"},{"name":"kbone,vue","slug":"kbone-vue","permalink":"http://superliebe.github.io/tags/kbone-vue/"}]}