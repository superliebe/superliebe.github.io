<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dockerToolbox的安装配置</title>
      <link href="/2020/06/17/dockerTool-box%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/06/17/dockerTool-box%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/17/NEy0ij.png" alt=""></p><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><a id="more"></a><h3 id="docker的基本介绍"><a href="#docker的基本介绍" class="headerlink" title="docker的基本介绍"></a>docker的基本介绍</h3><p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p><p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p><p>docker 与 传统虚拟机相比</p><table><thead><tr><th>特性</th><th>docker容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>硬盘使用</td><td>一般为 MB</td><td>一般为 GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h3 id="DockerToolbox安装docker"><a href="#DockerToolbox安装docker" class="headerlink" title="DockerToolbox安装docker"></a>DockerToolbox安装docker</h3><p><a href="https://www.docker.com" target="_blank" rel="noopener">docker官网</a></p><p>win7、win8，非win10专业版等需要利用 docker toolbox 来安装，国内可以使用阿里云的镜像来下载，下载地址：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</a></p><p><img src="https://s1.ax1x.com/2020/06/17/NERd8H.png" alt=""></p><p>选择需要的服务，进行下一步安装</p><p>安装成功后，桌面会显示启动图标，双击运行<br><img src="https://s1.ax1x.com/2020/06/17/NE43WD.png" alt=""></p><p>如果运行成功，进入docker</p><p><a href="https://imgchr.com/i/NEWUe0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/17/NEWUe0.md.png" alt="NEWUe0.md.png"></a></p><p>如果失败，请看下方安装问题</p><h3 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h3><p>双击Docker Quickstart Terminal，提示windows 正在查找bash.exe。如果想亲自查找文件，请点击“浏览”。</p><p><strong>问题原因</strong><br>一般出现这个问题，是因为之前已经安装过了git，且bash.exe的路径与Docker Toolbox中不一致导致的。</p><p><strong>解决办法</strong><br>右击Docker Quickstart Terminal的图标，修改前一段bash的路径。</p><p><img src="https://s1.ax1x.com/2020/06/17/NE5Qns.png" alt="NE5Qns.png"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2下一代web开发框架</title>
      <link href="/2020/06/10/koa%E4%B8%8B%E4%B8%80%E4%BB%A3web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/06/10/koa%E4%B8%8B%E4%B8%80%E4%BB%A3web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/10/tob9aD.png" alt=""></p><p><strong>next generation web framework for node.js</strong></p><a id="more"></a><p><a href="https://www.koajs.com.cn" target="_blank" rel="noopener">koa官网</a></p><p>先看一下 koa 的交互流程概念</p><p><img src="https://s1.ax1x.com/2020/06/10/toXbcj.png" alt="koa核心概念"></p><h3 id="koa的工作原理"><a href="#koa的工作原理" class="headerlink" title="koa的工作原理"></a>koa的工作原理</h3><p>koa中的中间件本质上就是一个async函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Koa 中间件的实现原理，也就是洋葱模型的实现原理，核心在于next的实现。next需要依次调用下一个middleware，当到最后一个的时候结束，这样后面middleware的promise先resolve，然后直到第一个，这样的流程也就是洋葱模型的流程了。</p></blockquote><p><img src="https://s1.ax1x.com/2020/06/10/tTpm1U.jpg" alt=""></p><p>基本写法示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>打开浏览器 localhost:3000就可以看到Hello World</p><h3 id="koa-router路由配置"><a href="#koa-router路由配置" class="headerlink" title="koa-router路由配置"></a>koa-router路由配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D koa-router</span><br></pre></td></tr></table></figure><p>引入路由组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// const Router = require('koa-router');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义router</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个get方法</span></span><br><span class="line">router.get(<span class="string">'/api'</span>,ctx=&gt;&#123;</span><br><span class="line">    ctx.body = <span class="string">'hello api!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.prefix添加接口前缀</span></span><br><span class="line">router.prefix(<span class="string">'/api'</span>)</span><br></pre></td></tr></table></figure><h3 id="路由组建压缩"><a href="#路由组建压缩" class="headerlink" title="路由组建压缩"></a>路由组建压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -S koa-combine-routers</span><br></pre></td></tr></table></figure><h3 id="添加安全头部-koa-helmet"><a href="#添加安全头部-koa-helmet" class="headerlink" title="添加安全头部 koa-helmet"></a>添加安全头部 koa-helmet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -S koa-helmet</span><br></pre></td></tr></table></figure><h3 id="添加静态文件-koa-static"><a href="#添加静态文件-koa-static" class="headerlink" title="添加静态文件 koa-static"></a>添加静态文件 koa-static</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -S koa-static</span><br></pre></td></tr></table></figure><h3 id="koa-body协议解析"><a href="#koa-body协议解析" class="headerlink" title="koa-body协议解析"></a>koa-body协议解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cnpm i koa-body</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法，直接use即可</span></span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"></span><br><span class="line">app.use(koaBody());</span><br></pre></td></tr></table></figure><h3 id="koa-cors跨域处理"><a href="#koa-cors跨域处理" class="headerlink" title="@koa/cors跨域处理"></a>@koa/cors跨域处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cnpm i @koa/cors</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法，直接use即可</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'@koa/cors'</span>);</span><br><span class="line"> </span><br><span class="line">app.use(cors());</span><br></pre></td></tr></table></figure><h3 id="配置koa的热加载-nodemon"><a href="#配置koa的热加载-nodemon" class="headerlink" title="配置koa的热加载 nodemon"></a>配置koa的热加载 nodemon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i - D nodemon</span><br></pre></td></tr></table></figure><p>使用<code>npx nodemon src/index.js</code> 监听文件内容变化，实现热更新</p>]]></content>
      
      
      <categories>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs,koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli4性能优化之路</title>
      <link href="/2020/06/04/vue-cli4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/06/04/vue-cli4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/04/t0Rsk8.png" alt=""></p><p>vue 生产环境上的性能优化：开启 Gzip、去掉打包后的 console、图片懒加载等</p><a id="more"></a><h2 id="开启-Gzip-压缩模式"><a href="#开启-Gzip-压缩模式" class="headerlink" title="开启 Gzip 压缩模式"></a>开启 Gzip 压缩模式</h2><p>gizp 压缩是一种 http 请求优化方式，通过减少文件体积来提高加载速度，对于用户量多的网站，开启 gizp 压缩会大大降低服务器压力，提高加载速度，降低服务器流量成本</p><blockquote><p><strong>安装 compression-webpack-plugin 插件</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p><strong>vue.config.js 配置 Gzip 压缩</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入compression-webpack-plugin</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">// 定义压缩文件类型</span></span><br><span class="line"><span class="keyword">const</span> productionGzipExtensions = [<span class="string">"js"</span>, <span class="string">"css"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//统一配置打包插件</span></span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">"[path].gz[query]"</span>,</span><br><span class="line">        algorithm: <span class="string">"gzip"</span>,</span><br><span class="line">        test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\.("</span> + productionGzipExtensions.join(<span class="string">"|"</span>) + <span class="string">")$"</span>), <span class="comment">//匹配文件名</span></span><br><span class="line">        threshold: <span class="number">10240</span>, <span class="comment">//对10K以上的数据进行压缩</span></span><br><span class="line">        minRatio: <span class="number">0.8</span>,</span><br><span class="line">        deleteOriginalAssets: <span class="literal">false</span>, <span class="comment">//是否删除源文件</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>npm run build 之后，对比之前的文件，平均压缩了 4 倍左右</p><p><img src="https://s1.ax1x.com/2020/06/04/t0I3TI.png" alt="build.png"></p><p>接下来在服务器的 nginx 上配置 Gzip</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启或关闭gzip on off</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">5k</span>; <span class="comment">#gzip压缩最小文件大小，超出进行压缩（自行调节）</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>; <span class="comment">#buffer 不用修改</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">4</span>; <span class="comment">#压缩级别:1-10，数字越大压缩的越好，时间也越长</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; <span class="comment">#  压缩文件类型</span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>; <span class="comment"># 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span></span><br></pre></td></tr></table></figure><p>修改后记得执行 <code>nginx -s reload</code></p><p>一般浏览器都已支持.gz 的资源文件，在 http 请求的 Request Headers 中能看到 Accept-Encoding:gzip，加载速度会提升很大。</p><p><img src="https://s1.ax1x.com/2020/06/04/t0TMdA.png" alt=""></p><h2 id="去掉打包后的-console"><a href="#去掉打包后的-console" class="headerlink" title="去掉打包后的 console"></a>去掉打包后的 console</h2><blockquote><p><strong>使用 babel-plugin-transform-remove-console 插件</strong></p></blockquote><p>安装依赖库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-plugin-transform-remove-<span class="built_in">console</span> --save-dev</span><br></pre></td></tr></table></figure><p>【babel.config.js】配置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> plugins = [<span class="string">"@vue/babel-plugin-transform-vue-jsx"</span>];</span><br><span class="line"><span class="comment">// 生产环境移除console</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"production"</span>) &#123;</span><br><span class="line">  plugins.push(<span class="string">"transform-remove-console"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: plugins,</span><br><span class="line">  presets: [<span class="string">"@vue/cli-plugin-babel/preset"</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>打包部署后，生产环境的 console 就全部去掉了~</p><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><blockquote><p><strong>使用 vue-lazyload</strong></p></blockquote><ul><li>安装依赖</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-lazyload -S</span><br></pre></td></tr></table></figure><ul><li>main.js 中直接引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyload <span class="keyword">from</span> <span class="string">"vue-lazyload"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueLazyload);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or with options</span></span><br><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">  <span class="comment">//预加载高度</span></span><br><span class="line">  preLoad: <span class="number">1.3</span>,</span><br><span class="line">  <span class="comment">//错误时显示的图片</span></span><br><span class="line">  error: <span class="string">"static/about111.jpg"</span>,</span><br><span class="line">  <span class="comment">//图片加载中显示的图片</span></span><br><span class="line">  loading: <span class="string">"static/img/loading.gif"</span>,</span><br><span class="line">  <span class="comment">//尝试加载次数</span></span><br><span class="line">  attempt: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在组件中使用时，将 img 标签的 src 换成 v-lazy：</li></ul><ol><li>未使用懒加载前的代码：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"g-img1"</span> <span class="attr">src</span>=<span class="string">"static/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用懒加载后的代码：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"g-img1"</span> <span class="attr">v-lazy</span>=<span class="string">"'static/1.jpg'"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue常用小方法合集</title>
      <link href="/2020/06/03/vue%E5%B8%B8%E7%94%A8%E5%B0%8F%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/"/>
      <url>/2020/06/03/vue%E5%B8%B8%E7%94%A8%E5%B0%8F%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/03/tUoQN8.png" alt=""></p><p>记录一下 vue 项目中经常使用的小方法</p><a id="more"></a><h3 id="一：获取-url-地址栏参数"><a href="#一：获取-url-地址栏参数" class="headerlink" title="一：获取 url 地址栏参数"></a>一：获取 url 地址栏参数</h3><p>例如：/placeList?id=1;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.query.id(id为连接上的参数名称);</span><br></pre></td></tr></table></figure><h3 id="二：向下一个页面传递对象-query-传参"><a href="#二：向下一个页面传递对象-query-传参" class="headerlink" title="二：向下一个页面传递对象 (query 传参)"></a>二：向下一个页面传递对象 (query 传参)</h3><p>父.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">  path: <span class="string">"/placeAdd"</span>,</span><br><span class="line">  query: item,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//path和query均为固定key名</span></span><br><span class="line"><span class="comment">//path：跳转路径</span></span><br><span class="line"><span class="comment">//query: 传递参数对象</span></span><br><span class="line"><span class="comment">//item:数组对象</span></span><br></pre></td></tr></table></figure><p>子.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.query.item;</span><br></pre></td></tr></table></figure><h3 id="三：父组件向子组件传值"><a href="#三：父组件向子组件传值" class="headerlink" title="三：父组件向子组件传值"></a>三：父组件向子组件传值</h3><p>父.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引入子组件*/</span></span><br><span class="line">&lt;child-v ref=<span class="string">"chil"</span>&gt;&lt;<span class="regexp">/child-v&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*script</span><br><span class="line"> *showHover为子元素内的方法*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">this.$refs.chil.showMessage("父组件调用子组件方法啦");</span></span><br></pre></td></tr></table></figure><p>子.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要正常定义方法接参即可</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    showMessage(text) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(text)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四：父子组件相互调用"><a href="#四：父子组件相互调用" class="headerlink" title="四：父子组件相互调用"></a>四：父子组件相互调用</h3><ul><li><p>vue 子组件调用父组件方法：</p><p>  子组件：this.$emit(‘xx’);</p><p>  父组件:定义 yy 方法，并在引用子组件时传参,如@xx=”yy”</p></li><li><p>vue 父组件调用子组件方法：</p><p>  子组件：定义 xx 方法</p><p>  父组件：引用子组件时加上 ref=”yy”,调用方法为 this.$refs.yy.xx()</p></li></ul><h3 id="五：阻止父元素冒泡事件"><a href="#五：阻止父元素冒泡事件" class="headerlink" title="五：阻止父元素冒泡事件"></a>五：阻止父元素冒泡事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当触发 button 的事件 a 时，b 事件也会被触发</p><p>解决办法：在 button 上添加@click.stop=”b”，来阻止事件冒泡。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六：数组操作"><a href="#六：数组操作" class="headerlink" title="六：数组操作"></a>六：数组操作</h3><h4 id="去掉指定数组对象-id-相同的元素"><a href="#去掉指定数组对象-id-相同的元素" class="headerlink" title="去掉指定数组对象 id 相同的元素"></a>去掉指定数组对象 id 相同的元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(arr.findIndex(item &#x3D;&gt; item.id &#x3D;&#x3D; id), 1)</span><br></pre></td></tr></table></figure><h4 id="过滤对象数组中key值相同的数据"><a href="#过滤对象数组中key值相同的数据" class="headerlink" title="过滤对象数组中key值相同的数据"></a>过滤对象数组中key值相同的数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr =[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">1095</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"三月"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">1106</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"三月"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">987</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"四月"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">1166</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"四月"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">753</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"五月"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">891</span>,</span><br><span class="line">    <span class="string">"month"</span>: <span class="string">"五月"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> new2 = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> !res.has(item.month) &amp;&amp; res.set(item.month, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.length, new2);</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：newArr = [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="随机取数组对象"><a href="#随机取数组对象" class="headerlink" title="随机取数组对象"></a>随机取数组对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrayItems</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组;</span></span><br><span class="line">  <span class="keyword">var</span> temp_array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    temp_array.push(arr[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//取出的数值项,保存在此数组</span></span><br><span class="line">  <span class="keyword">var</span> return_array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">    <span class="comment">//判断如果数组还有可以取出的元素,以防下标越界</span></span><br><span class="line">    <span class="keyword">if</span> (temp_array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//在数组中产生一个随机索引</span></span><br><span class="line">      <span class="keyword">var</span> arrIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * temp_array.length);</span><br><span class="line">      <span class="comment">//将此随机索引的对应的数组元素值复制出来</span></span><br><span class="line">      return_array[i] = temp_array[arrIndex];</span><br><span class="line">      <span class="comment">//然后删掉此索引的数组元素,这时候temp_array变为新的数组</span></span><br><span class="line">      temp_array.splice(arrIndex, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项.</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> return_array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七：限制能输入数字类型-小数点"><a href="#七：限制能输入数字类型-小数点" class="headerlink" title="七：限制能输入数字类型+小数点"></a>七：限制能输入数字类型+小数点</h3><ul><li>纯整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onkeyup = <span class="string">"value=value.replace(/[^d]/g,'')"</span>;</span><br></pre></td></tr></table></figure><ul><li>数字类型+小数点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">oninput</span>=<span class="string">"value=value.replace(/[^\d.]/g,'')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八：vue-修改-data-数据后页面未渲染"><a href="#八：vue-修改-data-数据后页面未渲染" class="headerlink" title="八：vue 修改 data 数据后页面未渲染"></a>八：vue 修改 data 数据后页面未渲染</h3><ul><li>强制渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$forceUpdate();</span><br></pre></td></tr></table></figure><ul><li>使用 Vue.set</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(target, key, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// target：要更改的数据源(可以是对象或者数组)</span></span><br><span class="line"><span class="comment">// key：要更改的具体数据</span></span><br><span class="line"><span class="comment">// value ：重新赋的值</span></span><br></pre></td></tr></table></figure><h3 id="九：时间戳转化为时间"><a href="#九：时间戳转化为时间" class="headerlink" title="九：时间戳转化为时间"></a>九：时间戳转化为时间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将时间戳转化为日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timestampToTime</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp); <span class="comment">//时间戳为10位需*1000，时间戳为13位的话不需乘1000</span></span><br><span class="line">  <span class="keyword">var</span> Y = date.getFullYear() + <span class="string">"-"</span>;</span><br><span class="line">  <span class="keyword">var</span> M =</span><br><span class="line">    (date.getMonth() + <span class="number">1</span> &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">"0"</span> + (date.getMonth() + <span class="number">1</span>)</span><br><span class="line">      : date.getMonth() + <span class="number">1</span>) + <span class="string">"-"</span>;</span><br><span class="line">  <span class="keyword">var</span> D = (date.getDate() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getDate() : date.getDate()) + <span class="string">" "</span>;</span><br><span class="line">  <span class="keyword">var</span> h =</span><br><span class="line">    (date.getHours() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getHours() : date.getHours()) + <span class="string">":"</span>;</span><br><span class="line">  <span class="keyword">var</span> m =</span><br><span class="line">    (date.getMinutes() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getMinutes() : date.getMinutes()) +</span><br><span class="line">    <span class="string">":"</span>;</span><br><span class="line">  <span class="keyword">var</span> s = date.getSeconds() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getSeconds() : date.getSeconds();</span><br><span class="line">  <span class="keyword">return</span> Y + M + D + h + m + s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十：计算两个时间相差日期"><a href="#十：计算两个时间相差日期" class="headerlink" title="十：计算两个时间相差日期"></a>十：计算两个时间相差日期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//startData,endData均为时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timesDiffer</span>(<span class="params">startData, endData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date1 = startData; <span class="comment">//开始时间</span></span><br><span class="line">  <span class="keyword">var</span> date2 = endData; <span class="comment">//结束时间</span></span><br><span class="line">  <span class="keyword">var</span> date3 = <span class="built_in">parseInt</span>(date2) - <span class="built_in">parseInt</span>(date1); <span class="comment">//时间差的毫秒数</span></span><br><span class="line">  <span class="comment">//计算出相差天数</span></span><br><span class="line">  <span class="keyword">var</span> days = <span class="built_in">Math</span>.floor(date3 / (<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>));</span><br><span class="line">  <span class="comment">//计算出小时数</span></span><br><span class="line">  <span class="keyword">var</span> leave1 = date3 % (<span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>); <span class="comment">//计算天数后剩余的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> hours = <span class="built_in">Math</span>.floor(leave1 / (<span class="number">3600</span> * <span class="number">1000</span>));</span><br><span class="line">  <span class="comment">//计算相差分钟数</span></span><br><span class="line">  <span class="keyword">var</span> leave2 = leave1 % (<span class="number">3600</span> * <span class="number">1000</span>); <span class="comment">//计算小时数后剩余的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> minutes = <span class="built_in">Math</span>.floor(leave2 / (<span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算相差秒数</span></span><br><span class="line">  <span class="keyword">var</span> leave3 = leave2 % (<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">//计算分钟数后剩余的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> seconds = <span class="built_in">Math</span>.round(leave3 / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hours &lt;= <span class="number">0</span> &amp;&amp; minutes &lt;= <span class="number">0</span> &amp;&amp; seconds &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//时间小于0s的操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    hours = hours &lt; <span class="number">10</span> ? <span class="string">"0"</span> + hours : hours;</span><br><span class="line">    minutes = minutes &lt; <span class="number">10</span> ? <span class="string">"0"</span> + minutes : minutes;</span><br><span class="line">    seconds = seconds &lt; <span class="number">10</span> ? <span class="string">"0"</span> + seconds : seconds;</span><br><span class="line">    <span class="keyword">return</span> hours + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一：下载文件流"><a href="#十一：下载文件流" class="headerlink" title="十一：下载文件流"></a>十一：下载文件流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载文件流</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operateFile</span>(<span class="params">file, filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var filename = '';</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(file.data);</span><br><span class="line">  <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">  link.style.display = <span class="string">"none"</span>;</span><br><span class="line">  link.href = url;</span><br><span class="line">  link.setAttribute(<span class="string">"download"</span>, filename + <span class="string">".xls"</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">  link.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二：计算-n-天前后的日期"><a href="#十二：计算-n-天前后的日期" class="headerlink" title="十二：计算 n 天前后的日期"></a>十二：计算 n 天前后的日期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeforeDate</span>(<span class="params">strDate, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//strDate 为字符串日期 如:'2020-01-01' n为你要传入的参数，当前为0，前一天为-1，后一天为1</span></span><br><span class="line">  <span class="keyword">let</span> datt = strDate.split(<span class="string">"-"</span>); <span class="comment">//这边给定一个特定时间</span></span><br><span class="line">  <span class="keyword">var</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(datt[<span class="number">0</span>], datt[<span class="number">1</span>] - <span class="number">1</span>, datt[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">let</span> befminuts = newDate.getTime() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="built_in">parseInt</span>(n); <span class="comment">//计算前几天用减，计算后几天用加，最后一个就是多少天的数量</span></span><br><span class="line">  <span class="keyword">let</span> beforeDat = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  beforeDat.setTime(befminuts);</span><br><span class="line">  <span class="keyword">let</span> befMonth = beforeDat.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> mon = befMonth &gt;= <span class="number">10</span> ? befMonth : <span class="string">"0"</span> + befMonth;</span><br><span class="line">  <span class="keyword">let</span> befDate = beforeDat.getDate();</span><br><span class="line">  <span class="keyword">let</span> da = befDate &gt;= <span class="number">10</span> ? befDate : <span class="string">"0"</span> + befDate;</span><br><span class="line">  <span class="keyword">var</span> newDate = beforeDat.getFullYear() + <span class="string">"-"</span> + mon + <span class="string">"-"</span> + da;</span><br><span class="line">  <span class="built_in">console</span>.log(newDate);</span><br><span class="line">  <span class="keyword">return</span> newDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十三：ASCII-码排序参数"><a href="#十三：ASCII-码排序参数" class="headerlink" title="十三：ASCII 码排序参数"></a>十三：ASCII 码排序参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objKeySort</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//obj排序对象</span></span><br><span class="line">  <span class="keyword">var</span> newkey = <span class="built_in">Object</span>.keys(obj).sort();</span><br><span class="line">  <span class="keyword">var</span> newObj = &#123;&#125;; <span class="comment">//创建一个新的对象，用于存放排好序的键值对</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newkey.length; i++) &#123;</span><br><span class="line">    newObj[newkey[i]] = obj[newkey[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj; <span class="comment">//返回排好序的新对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ### vuex状态管理模式 -->]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn使安装健步如飞</title>
      <link href="/2020/06/01/yarn%E4%BD%BF%E5%AE%89%E8%A3%85%E5%81%A5%E6%AD%A5%E5%A6%82%E9%A3%9E/"/>
      <url>/2020/06/01/yarn%E4%BD%BF%E5%AE%89%E8%A3%85%E5%81%A5%E6%AD%A5%E5%A6%82%E9%A3%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/01/tJDuO1.png" alt=""></p><p>yarn 快速、可靠、安全的依赖管理工具。</p><a id="more"></a><h3 id="看栗子说话"><a href="#看栗子说话" class="headerlink" title="看栗子说话"></a>看栗子说话</h3><p><font color=#f44>采用 cnpm 和 yarn 安装 webpack 工具</font></p><p><strong>cnpm 效果图（总花费 60s）</strong></p><p><img src="https://s1.ax1x.com/2020/06/02/tYrdQH.png" alt="cnpm 效果图"></p><p><strong>yarn 效果图（总花费 11s）</strong></p><p><img src="https://s1.ax1x.com/2020/06/02/tYs3cQ.png" alt="yarn 效果图"></p><h3 id="🙄-为什么要用-yarn"><a href="#🙄-为什么要用-yarn" class="headerlink" title="🙄 为什么要用 yarn"></a>🙄 为什么要用 yarn</h3><p><strong>速度超快</strong></p><p>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p><strong>超级安全</strong></p><p>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p><strong>超级可靠</strong></p><p>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</p><h3 id="🧐-更新淘宝源"><a href="#🧐-更新淘宝源" class="headerlink" title="🧐 更新淘宝源"></a>🧐 更新淘宝源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># yarn+淘宝源，飞一般的速度</span><br><span class="line">yarn config <span class="keyword">get</span> registry</span><br><span class="line"># https://registry.yarnpkg.com</span><br><span class="line"></span><br><span class="line">yarn config <span class="keyword">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">yarn config <span class="keyword">get</span> registry</span><br><span class="line"># https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="从-npm-迁移"><a href="#从-npm-迁移" class="headerlink" title="从 npm 迁移"></a>从 npm 迁移</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install === yarn</span><br><span class="line"></span><br><span class="line">npm install [package] --save === yarn add [package]</span><br><span class="line"></span><br><span class="line">npm install [package] --save-dev === yarn add [package] --dev</span><br><span class="line"></span><br><span class="line">npm install [package] --global === yarn global add [package]</span><br><span class="line"></span><br><span class="line">npm uninstall [package] --save === yarn remove [package]</span><br><span class="line"></span><br><span class="line">rm -rf node_modules &amp;&amp; npm install === yarn upgrade</span><br></pre></td></tr></table></figure><p><a href="https://yarn.bootcss.com" target="_blank" rel="noopener">yarn 官网</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm,yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2020/05/31/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/31/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/31/t1k2xU.jpg" alt="linux"></p><p>Linux，全称 GNU/Linux，是一套免费使用和自由传播的类 UNIX 操作系统</p><a id="more"></a><h3 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h3><ul><li><p>cd dirname 目录路径跳转</p></li><li><p>mkdir dirname 创建目录</p></li><li><p>touch filename 创建文件</p></li><li><p>vi filename 编辑文件</p></li><li><p>cat filename 查看文件</p></li><li><p>echo ‘123456’ &gt;&gt; test.txt 在 test.txt 文件尾部增加一行 ‘123123’</p></li><li><p>echo ‘123456’ &gt; test.txt 覆盖 test.txt 文件的内容为 ‘hello world’</p></li><li><p>rm text.txt 删除 text.txt 文件</p></li><li><p>rm -r textdir 删除 testdir 目录</p></li><li><p>rm -rf 强制删除</p></li><li><p>wget 文件地址 下载文件</p></li><li><p>tar zxvf 文件 （如 apache-tomcat-9.0.17.tar.zg：解压缩文件 tar 后面的参数 z 代表 gz 等结尾的压缩文件，x 代表解压缩，v 显示所有的解压过程，f 代表归档的名字）</p></li><li><p>tar zcvf 文件名（如 apache-tomcat-9.0.18.tar.gz） 文件目录：讲文件目录 压缩为 文件名为 apache-tomcat-9.0.18.tar.gz</p></li><li><p>ps -ef | grep 进程名： 查看进程（筛选进程）</p></li><li><p>kill -9 进程 pid: 杀死 进程</p></li></ul><h3 id="查看系统服务"><a href="#查看系统服务" class="headerlink" title="查看系统服务"></a>查看系统服务</h3><ul><li>service 服务名 status: 如 （service sshd status :查询 ssh 服务的运行状态）</li><li>service 服务名 stop :关闭某个服务</li><li>service 服务名 restart:重启某个服务</li><li>systemctl status firewalld.service: 查看某个服务运行状态</li></ul><h3 id="使用-root-用户连接-linux-服务器"><a href="#使用-root-用户连接-linux-服务器" class="headerlink" title="使用 root 用户连接 linux 服务器"></a>使用 root 用户连接 linux 服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure><h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>检查防火墙</p><p><code>firewall-cmd --permanent --query-port=10022/tcp</code></p><p>如果是 no,就添加一下</p><p><code>firewall-cmd --permanent --add-port=10022/tcp</code></p><p>成功后再重载防火墙</p><p><code>firewall-cmd --reload</code></p><p>再重启下防火墙服务</p><p><code>systemctl restart firewalld.service</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Markdown语法</title>
      <link href="/2020/05/24/%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/05/24/%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/24/YzvhqJ.png" alt=""></p><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档</p><a id="more"></a><blockquote><p>💡 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></blockquote><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><ul><li>使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六级标题。# 和标题之间记得有个空格哦。</li></ul><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="二、引用"><a href="#二、引用" class="headerlink" title="二、引用"></a>二、引用</h2><p>使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推。</p><blockquote><p>❗ 部分编辑器不支持多级嵌套，建议不要使用</p></blockquote><p><em>示例</em></p><blockquote><p>这是一级引用</p><blockquote><p>这是二级引用</p><blockquote><p>这是三级引用</p></blockquote></blockquote></blockquote><blockquote><p>这是一级引用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一级引用</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 这是二级引用</span><br><span class="line">&gt; &gt;</span><br><span class="line">&gt; &gt; &gt; 这是三级引用</span><br><span class="line"></span><br><span class="line">&gt; 这是一级引用</span><br></pre></td></tr></table></figure><h2 id="三、代码块"><a href="#三、代码块" class="headerlink" title="三、代码块"></a>三、代码块</h2><p>使用 3 个连续的` 符号包围起来表示代码块。可以指定语言来使代码高亮。</p><p><em>示例</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line">  $(&#39;pre code&#39;).each(function(i, block) &#123;</span><br><span class="line">    hljs.highlightBlock(block);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"pre code"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i, block</span>) </span>&#123;</span><br><span class="line">    hljs.highlightBlock(block);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>行内代码</strong></p><p>使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。</p><p><em>示例</em></p><p>这是 <code>javascript</code> 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是&#96;javascript&#96;代码</span><br></pre></td></tr></table></figure><h2 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h2><p>使用 <font color=#2196f3><code>[](link)</code></font> 表示行内链接。其中：</p><ul><li><p><font color=#2196f3>[]</font> 内的内容为要添加链接的文字。</p></li><li><p><font color=#2196f3>link</font> 为链接地址。</p></li></ul><p><em>示例</em></p><p>这是跳转<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是跳转[百度](https:&#x2F;&#x2F;www.baidu.com)的链接</span><br></pre></td></tr></table></figure><h2 id="五、导入图片"><a href="#五、导入图片" class="headerlink" title="五、导入图片"></a>五、导入图片</h2><p>使用 <code>![Alt text](/path/to/img.jpg)</code> 导入图片。其中：</p><ul><li><font color=#2196f3>Alt text</font> 为如果图片无法显示时显示的文字；</li><li><font color=#2196f3>/path/to/img.jpg</font> 为图片所在路径；</li></ul><ol><li><strong>本地引用</strong>是图片直接存储到本地通过相对路径引用，无需网络连接</li><li><strong>上传图片</strong>将把图片上传至<a href="https://imgchr.com" target="_blank" rel="noopener">图床</a>，这样在文档或图片移动时认可访问图片</li></ol><p><em>示例</em></p><p><img src="https://i.loli.net/2020/03/14/I8wCZN4r9UltqTd.jpg" alt="Markdown"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Markdown](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;03&#x2F;14&#x2F;I8wCZN4r9UltqTd.jpg)</span><br></pre></td></tr></table></figure><h2 id="六、Todo-List"><a href="#六、Todo-List" class="headerlink" title="六、Todo List"></a>六、Todo List</h2><p>小写 x 表示已完成， 空格表示未完成</p><ul><li><input checked="" disabled="" type="checkbox"> 支持数学公式</li><li><input checked="" disabled="" type="checkbox"> 支持 TodoList</li><li><input checked="" disabled="" type="checkbox"> 支持自定义样式</li><li><input disabled="" type="checkbox"> 支持自定义图床</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [x] 支持数学公式</span><br><span class="line">- [x] 支持TodoList</span><br><span class="line">- [x] 支持自定义样式</span><br><span class="line">- [ ] 支持自定义图床</span><br></pre></td></tr></table></figure><h2 id="七、粗体，斜体，高亮和删除线"><a href="#七、粗体，斜体，高亮和删除线" class="headerlink" title="七、粗体，斜体，高亮和删除线"></a>七、粗体，斜体，高亮和删除线</h2><ul><li>使用 <code>**</code> 表示<strong>粗体</strong>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br></pre></td></tr></table></figure><ul><li>使用 <code>*</code> 或者 <code>_</code> 表示 _斜体_。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><ul><li>使用 <code>***</code> 表示 <strong><em>全部粗体和斜体</em></strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***全部粗体和斜体***</span><br></pre></td></tr></table></figure><ul><li>使用 <code>==</code> 表示 ==高亮==</li></ul><blockquote><p>❗ 部分编辑器不支持高亮</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;高亮&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>使用<code>~~</code>表示 <del>删除</del></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure><h2 id="八、列表"><a href="#八、列表" class="headerlink" title="八、列表"></a>八、列表</h2><p>使用 <code>1. 1. 1.</code> 表示有序列表，使用 <code>*</code> 或 <code>-</code> 或 <code>+</code> 表示无序列表。</p><ol><li><p>无序列表或有序列表标记和后面的文字之间要有一个空格隔开。</p></li><li><p>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例 1 所示。</p></li><li><p>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例 2 所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。</p></li></ol><p>_示例 1_：有序列表</p><ol><li>第 1 行</li><li>第 2 行</li><li>第 3 行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第1行</span><br><span class="line">1. 第2行</span><br><span class="line">1. 第3行</span><br></pre></td></tr></table></figure><p>_示例 2_：无序列表</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容<ul><li>三级无序列表内容</li></ul></li></ul></li></ul><ul><li>一级无序列表内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 一级无序列表内容</span><br><span class="line">    - 二级无序列表内容</span><br><span class="line">        - 三级无序列表内容</span><br><span class="line">*  一级无序列表内容</span><br></pre></td></tr></table></figure><h2 id="九、分割线"><a href="#九、分割线" class="headerlink" title="九、分割线"></a>九、分割线</h2><p>使用 <code>---</code> 或者 <code>***</code> 或者 <code>* * *</code> 表示水平分割线。</p><ol><li>只要 <code>*</code> 或者 <code>-</code> 大于等于三个就可组成一条平行线。</li><li>使用 <code>---</code> 作为水平分割线时，要在它的前后都空一行，防止 <code>---</code> 被当成标题标记的表示方式。</li></ol><p><em>示例</em></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br></pre></td></tr></table></figure><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><p>默认表格<br>Heading | Heading | Heading<br>——- | ——- | ——-<br>Cell | Cell | Cell<br>Cell | Cell | Cell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Heading | Heading | Heading</span><br><span class="line">------- | ------- | -------</span><br><span class="line">Cell | Cell | Cell</span><br><span class="line">Cell | Cell | Cell</span><br></pre></td></tr></table></figure><p>对齐方式：<br>Heading | Heading | Heading<br>:—– | :—-: | ——:<br>Left | Center | Right<br>Left | Center | Right</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Heading | Heading | Heading</span><br><span class="line">:----- | :----: | ------:</span><br><span class="line">Left   | Center | Right</span><br><span class="line">Left   | Center | Right</span><br></pre></td></tr></table></figure><h2 id="十一、emoji"><a href="#十一、emoji" class="headerlink" title="十一、emoji"></a>十一、emoji</h2><p>使用 <code>:emoji</code>代码: 在 markdown 里添加 emoji 👻</p><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">点击这里查看所有支持的 emoji 代码</a></p><blockquote><p>❗ 部分编辑器不支持 emoji code <br><br>建议直接输入 emoji，<a href="https://www.emojidaquan.com" target="_blank" rel="noopener">点击这里查看并复制 emoji</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kbone+vue创建支持web和微信小程序的项目</title>
      <link href="/2020/04/26/kbone-vue%E5%88%9B%E5%BB%BA%E6%94%AF%E6%8C%81web%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/04/26/kbone-vue%E5%88%9B%E5%BB%BA%E6%94%AF%E6%8C%81web%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-7a735d09695218bec1d69477f6a243bc_1200x500.jpg" alt=""></p><p>Kbone 是腾讯开发的解决微信小程序和 Web 端同构的框架。简单来说就是只写一套代码，编译结果可以在 web 端和小程序上运行。</p><a id="more"></a><h3 id="Kbone-特点"><a href="#Kbone-特点" class="headerlink" title="Kbone 特点"></a>Kbone 特点</h3><ol><li>支持多种前端框架，如：vue、react、preact 等，并且能够保持该框架的完整；</li><li>页面渲染的内容需要用 js 中的 document 方法来渲染，提供常用的 DOM/BOM 接口；</li><li>小程序端开发仍可使用小程序本身特性；</li><li>更专注于微信和小程序的开发；</li><li>Webpack 与 Kbone 是强耦合的，开发需借助 Webpack 提供的基本依赖</li></ol><h3 id="一：安装-kbone-cli"><a href="#一：安装-kbone-cli" class="headerlink" title="一：安装 kbone-cli"></a>一：安装 kbone-cli</h3><p>命令行安装<strong>kbone-cli</strong>脚手架，用于创建<strong>kbone</strong>项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g kbone-cli</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200426100558340.png" alt=""></p><h3 id="二：创建对应的-kbone-项目"><a href="#二：创建对应的-kbone-项目" class="headerlink" title="二：创建对应的 kbone 项目"></a>二：创建对应的 kbone 项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kbone init my-app</span><br></pre></td></tr></table></figure><p>可以根据自己所用到的技术选择对应的选项（本项目采用<strong>kbone+vue</strong>），回车确定。</p><p><img src="https://img-blog.csdnimg.cn/20200426100919899.png" alt=""></p><p>创建成功之后，基本目录情况和 vue-cli4 目录差不多，其中在 build 文件夹里 miniprogram.config.js 进行小程序的配置，比如 appid 之类</p><p><img src="https://img-blog.csdnimg.cn/20200426101814636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVyS00=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="三：在-main-js-中引入-kbone-ui，使项目-ui-更贴近微信风格（可选）"><a href="#三：在-main-js-中引入-kbone-ui，使项目-ui-更贴近微信风格（可选）" class="headerlink" title="三：在 main.js 中引入 kbone-ui，使项目 ui 更贴近微信风格（可选）"></a>三：在 main.js 中引入 kbone-ui，使项目 ui 更贴近微信风格（可选）</h3><p>安装 kbone-ui</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i kbone-ui</span><br></pre></td></tr></table></figure><p>main.js 中引入样式文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> KboneUI <span class="keyword">from</span> <span class="string">"kbone-ui"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"kbone-ui/lib/weui/weui.css"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(KboneUI);</span><br></pre></td></tr></table></figure><h3 id="四：运行项目"><a href="#四：运行项目" class="headerlink" title="四：运行项目"></a>四：运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 开发小程序端</span><br><span class="line">npm run mp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开发 Web 端</span><br><span class="line">npm run web</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构建 Web 端</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><strong>web端运行效果图</strong></p><p><img src="https://img-blog.csdnimg.cn/20200426144813734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVyS00=,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>小程序端运行效果图</strong><br>npm run mp 之后 会在dis文件中创建对应的小程序文件，使用微信开发者工具打开预览，</p><p><img src="https://img-blog.csdnimg.cn/20200426145140903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVyS00=,size_16,color_FFFFFF,t_70" alt=""></p><p><font color=#f44>注意：官方提醒，尽量使用kbone-ui开发，目前功能正在逐步完善兼容，使用其他组件库可能会出现问题</font></p><p><strong><font color=blue><a href="https://wechat-miniprogram.github.io/kbone/docs/ui/intro/quickstart.html#安装使用" target="_blank" rel="noopener">kbone 官方文档</a></font></strong></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> kbone </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kbone,vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
